{"version":3,"file":"f7d05a0c513541c3e4f8.chunk.js","mappings":"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","sources":["webpack://superset/./src/components/DatabaseSelector/index.tsx","webpack://superset/./src/components/ImportModal/index.tsx","webpack://superset/./src/components/RefreshLabel/index.tsx","webpack://superset/./src/components/TableSelector/index.tsx","webpack://superset/./src/views/CRUD/data/common.ts","webpack://superset/./src/views/CRUD/data/dataset/AddDatasetModal.tsx","webpack://superset/./src/views/CRUD/data/dataset/DatasetList.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactNode, useState, useMemo, useEffect } from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport { AsyncSelect, Select } from 'src/components';\nimport Label from 'src/components/Label';\nimport { FormLabel } from 'src/components/Form';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\n\nconst DatabaseSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .select {\n      width: calc(100% - 30px - ${theme.gridUnit}px);\n      flex: 1;\n    }\n\n    & > div {\n      margin-bottom: ${theme.gridUnit * 4}px;\n    }\n  `}\n`;\n\nconst LabelStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-left: ${({ theme }) => theme.gridUnit - 2}px;\n\n  .backend {\n    overflow: visible;\n  }\n\n  .name {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n\ntype DatabaseValue = {\n  label: React.ReactNode;\n  value: number;\n  id: number;\n  database_name: string;\n  backend: string;\n  allow_multi_schema_metadata_fetch: boolean;\n};\n\nexport type DatabaseObject = {\n  id: number;\n  database_name: string;\n  backend: string;\n  allow_multi_schema_metadata_fetch: boolean;\n};\n\ntype SchemaValue = { label: string; value: string };\n\nexport interface DatabaseSelectorProps {\n  db?: DatabaseObject | null;\n  emptyState?: ReactNode;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => {};\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onEmptyResults?: (searchText?: string) => void;\n  onSchemaChange?: (schema?: string) => void;\n  onSchemasLoad?: (schemas: Array<object>) => void;\n  readOnly?: boolean;\n  schema?: string;\n  sqlLabMode?: boolean;\n}\n\nconst SelectLabel = ({\n  backend,\n  databaseName,\n}: {\n  backend: string;\n  databaseName: string;\n}) => (\n  <LabelStyle>\n    <Label className=\"backend\">{backend}</Label>\n    <span className=\"name\" title={databaseName}>\n      {databaseName}\n    </span>\n  </LabelStyle>\n);\n\nexport default function DatabaseSelector({\n  db,\n  formMode = false,\n  emptyState,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onEmptyResults,\n  onSchemaChange,\n  onSchemasLoad,\n  readOnly = false,\n  schema,\n  sqlLabMode = false,\n}: DatabaseSelectorProps) {\n  const [loadingSchemas, setLoadingSchemas] = useState(false);\n  const [schemaOptions, setSchemaOptions] = useState<SchemaValue[]>([]);\n  const [currentDb, setCurrentDb] = useState<DatabaseValue | undefined>(\n    db\n      ? {\n          label: (\n            <SelectLabel backend={db.backend} databaseName={db.database_name} />\n          ),\n          value: db.id,\n          ...db,\n        }\n      : undefined,\n  );\n  const [currentSchema, setCurrentSchema] = useState<SchemaValue | undefined>(\n    schema ? { label: schema, value: schema } : undefined,\n  );\n  const [refresh, setRefresh] = useState(0);\n  const { addSuccessToast } = useToasts();\n\n  const loadDatabases = useMemo(\n    () =>\n      async (\n        search: string,\n        page: number,\n        pageSize: number,\n      ): Promise<{\n        data: DatabaseValue[];\n        totalCount: number;\n      }> => {\n        const queryParams = rison.encode({\n          order_columns: 'database_name',\n          order_direction: 'asc',\n          page,\n          page_size: pageSize,\n          ...(formMode || !sqlLabMode\n            ? { filters: [{ col: 'database_name', opr: 'ct', value: search }] }\n            : {\n                filters: [\n                  { col: 'database_name', opr: 'ct', value: search },\n                  {\n                    col: 'expose_in_sqllab',\n                    opr: 'eq',\n                    value: true,\n                  },\n                ],\n              }),\n        });\n        const endpoint = `/api/v1/database/?q=${queryParams}`;\n        return SupersetClient.get({ endpoint }).then(({ json }) => {\n          const { result } = json;\n          if (getDbList) {\n            getDbList(result);\n          }\n          if (result.length === 0) {\n            if (onEmptyResults) onEmptyResults(search);\n          }\n          const options = result.map((row: DatabaseObject) => ({\n            label: (\n              <SelectLabel\n                backend={row.backend}\n                databaseName={row.database_name}\n              />\n            ),\n            value: row.id,\n            id: row.id,\n            database_name: row.database_name,\n            backend: row.backend,\n            allow_multi_schema_metadata_fetch:\n              row.allow_multi_schema_metadata_fetch,\n          }));\n\n          return {\n            data: options,\n            totalCount: options.length,\n          };\n        });\n      },\n    [formMode, getDbList, sqlLabMode],\n  );\n\n  useEffect(() => {\n    if (currentDb) {\n      setLoadingSchemas(true);\n      const queryParams = rison.encode({ force: refresh > 0 });\n      const endpoint = `/api/v1/database/${currentDb.value}/schemas/?q=${queryParams}`;\n\n      // TODO: Would be nice to add pagination in a follow-up. Needs endpoint changes.\n      SupersetClient.get({ endpoint })\n        .then(({ json }) => {\n          const options = json.result.map((s: string) => ({\n            value: s,\n            label: s,\n            title: s,\n          }));\n          if (onSchemasLoad) {\n            onSchemasLoad(options);\n          }\n          setSchemaOptions(options);\n          setLoadingSchemas(false);\n          if (refresh > 0) addSuccessToast('List refreshed');\n        })\n        .catch(() => {\n          setLoadingSchemas(false);\n          handleError(t('There was an error loading the schemas'));\n        });\n    }\n  }, [currentDb, onSchemasLoad, refresh]);\n\n  function changeDataBase(\n    value: { label: string; value: number },\n    database: DatabaseValue,\n  ) {\n    setCurrentDb(database);\n    setCurrentSchema(undefined);\n    if (onDbChange) {\n      onDbChange(database);\n    }\n    if (onSchemaChange) {\n      onSchemaChange(undefined);\n    }\n  }\n\n  function changeSchema(schema: SchemaValue) {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema.value);\n    }\n  }\n\n  function renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n    return (\n      <div className=\"section\">\n        <span className=\"select\">{select}</span>\n        <span className=\"refresh\">{refreshBtn}</span>\n      </div>\n    );\n  }\n\n  function renderDatabaseSelect() {\n    return renderSelectRow(\n      <AsyncSelect\n        ariaLabel={t('Select database or type database name')}\n        optionFilterProps={['database_name', 'value']}\n        data-test=\"select-database\"\n        header={<FormLabel>{t('Database')}</FormLabel>}\n        lazyLoading={false}\n        notFoundContent={emptyState}\n        onChange={changeDataBase}\n        value={currentDb}\n        placeholder={t('Select database or type database name')}\n        disabled={!isDatabaseSelectEnabled || readOnly}\n        options={loadDatabases}\n      />,\n      null,\n    );\n  }\n\n  function renderSchemaSelect() {\n    const refreshIcon = !formMode && !readOnly && (\n      <RefreshLabel\n        onClick={() => setRefresh(refresh + 1)}\n        tooltipContent={t('Force refresh schema list')}\n      />\n    );\n    return renderSelectRow(\n      <Select\n        ariaLabel={t('Select schema or type schema name')}\n        disabled={!currentDb || readOnly}\n        header={<FormLabel>{t('Schema')}</FormLabel>}\n        labelInValue\n        lazyLoading={false}\n        loading={loadingSchemas}\n        name=\"select-schema\"\n        placeholder={t('Select schema or type schema name')}\n        onChange={item => changeSchema(item as SchemaValue)}\n        options={schemaOptions}\n        showSearch\n        value={currentSchema}\n      />,\n      refreshIcon,\n    );\n  }\n\n  return (\n    <DatabaseSelectorWrapper data-test=\"DatabaseSelector\">\n      {renderDatabaseSelect()}\n      {renderSchemaSelect()}\n    </DatabaseSelectorWrapper>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useEffect, useState } from 'react';\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface';\nimport { styled, t } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport Modal from 'src/components/Modal';\nimport { Upload } from 'src/components';\nimport { useImportResource } from 'src/views/CRUD/hooks';\nimport { ImportResourceName } from 'src/views/CRUD/types';\nimport ErrorAlert from './ErrorAlert';\n\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n`;\n\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > div {\n    margin: ${({ theme }) => theme.gridUnit}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\n\nexport interface ImportModelsModalProps {\n  resourceName: ImportResourceName;\n  resourceLabel: string;\n  passwordsNeededMessage: string;\n  confirmOverwriteMessage: string;\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onModelImport: () => void;\n  show: boolean;\n  onHide: () => void;\n  passwordFields?: string[];\n  setPasswordFields?: (passwordFields: string[]) => void;\n}\n\nconst ImportModelsModal: FunctionComponent<ImportModelsModalProps> = ({\n  resourceName,\n  resourceLabel,\n  passwordsNeededMessage,\n  confirmOverwriteMessage,\n  onModelImport,\n  show,\n  onHide,\n  passwordFields = [],\n  setPasswordFields = () => {},\n}) => {\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [passwords, setPasswords] = useState<Record<string, string>>({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] =\n    useState<boolean>(false);\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState<boolean>(false);\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [importingModel, setImportingModel] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>();\n\n  const clearModal = () => {\n    setFileList([]);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    setImportingModel(false);\n    setErrorMessage('');\n  };\n\n  const handleErrorMsg = (msg: string) => {\n    setErrorMessage(msg);\n  };\n\n  const {\n    state: { alreadyExists, passwordsNeeded },\n    importResource,\n  } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n    if (passwordsNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [passwordsNeeded, setPasswordFields]);\n\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n    if (alreadyExists.length > 0) {\n      setImportingModel(false);\n    }\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n\n  const onUpload = () => {\n    if (!(fileList[0]?.originFileObj instanceof File)) {\n      return;\n    }\n\n    setImportingModel(true);\n    importResource(\n      fileList[0].originFileObj,\n      passwords,\n      confirmedOverwrite,\n    ).then(result => {\n      if (result) {\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n\n  const changeFile = (info: UploadChangeParam) => {\n    setFileList([\n      {\n        ...info.file,\n        status: 'done',\n      },\n    ]);\n  };\n\n  const removeFile = (removedFile: UploadFile) => {\n    setFileList(fileList.filter(file => file.uid !== removedFile.uid));\n    return false;\n  };\n\n  const confirmOverwrite = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetValue = (event.currentTarget?.value as string) ?? '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n\n  const renderPasswordFields = () => {\n    if (passwordFields.length === 0) {\n      return null;\n    }\n\n    return (\n      <>\n        <h5>Database passwords</h5>\n        <HelperMessage>{passwordsNeededMessage}</HelperMessage>\n        {passwordFields.map(fileName => (\n          <StyledInputContainer key={`password-for-${fileName}`}>\n            <div className=\"control-label\">\n              {fileName}\n              <span className=\"required\">*</span>\n            </div>\n            <input\n              name={`password-${fileName}`}\n              autoComplete={`password-${fileName}`}\n              type=\"password\"\n              value={passwords[fileName]}\n              onChange={event =>\n                setPasswords({ ...passwords, [fileName]: event.target.value })\n              }\n            />\n          </StyledInputContainer>\n        ))}\n      </>\n    );\n  };\n\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n\n    return (\n      <>\n        <StyledInputContainer>\n          <div className=\"confirm-overwrite\">{confirmOverwriteMessage}</div>\n          <div className=\"control-label\">\n            {t('Type \"%s\" to confirm', t('OVERWRITE'))}\n          </div>\n          <input\n            data-test=\"overwrite-modal-input\"\n            id=\"overwrite\"\n            type=\"text\"\n            onChange={confirmOverwrite}\n          />\n        </StyledInputContainer>\n      </>\n    );\n  };\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  return (\n    <Modal\n      name=\"model\"\n      className=\"import-model-modal\"\n      disablePrimaryButton={\n        fileList.length === 0 ||\n        (needsOverwriteConfirm && !confirmedOverwrite) ||\n        importingModel\n      }\n      onHandledPrimaryAction={onUpload}\n      onHide={hide}\n      primaryButtonName={needsOverwriteConfirm ? t('Overwrite') : t('Import')}\n      primaryButtonType={needsOverwriteConfirm ? 'danger' : 'primary'}\n      width=\"750px\"\n      show={show}\n      title={<h4>{t('Import %s', resourceLabel)}</h4>}\n    >\n      <StyledInputContainer>\n        <Upload\n          name=\"modelFile\"\n          id=\"modelFile\"\n          data-test=\"model-file-input\"\n          accept=\".yaml,.json,.yml,.zip\"\n          fileList={fileList}\n          onChange={changeFile}\n          onRemove={removeFile}\n          // upload is handled by hook\n          customRequest={() => {}}\n          disabled={importingModel}\n        >\n          <Button loading={importingModel}>Select file</Button>\n        </Upload>\n      </StyledInputContainer>\n      {errorMessage && (\n        <ErrorAlert\n          errorMessage={errorMessage}\n          showDbInstallInstructions={passwordFields.length > 0}\n        />\n      )}\n      {renderPasswordFields()}\n      {renderOverwriteConfirmation()}\n    </Modal>\n  );\n};\n\nexport default ImportModelsModal;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { MouseEventHandler, forwardRef } from 'react';\nimport { SupersetTheme } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons, { IconType } from 'src/components/Icons';\n\nexport interface RefreshLabelProps {\n  onClick: MouseEventHandler<HTMLSpanElement>;\n  tooltipContent: string;\n}\n\nconst RefreshLabel = ({ onClick, tooltipContent }: RefreshLabelProps) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const IconWithoutRef = forwardRef((props: IconType, ref: any) => (\n    <Icons.Refresh {...props} />\n  ));\n\n  return (\n    <Tooltip title={tooltipContent}>\n      <IconWithoutRef\n        role=\"button\"\n        onClick={onClick}\n        css={(theme: SupersetTheme) => ({\n          cursor: 'pointer',\n          color: theme.colors.grayscale.base,\n          '&:hover': { color: theme.colors.primary.base },\n        })}\n      />\n    </Tooltip>\n  );\n};\n\nexport default RefreshLabel;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  FunctionComponent,\n  useState,\n  ReactNode,\n  useMemo,\n  useEffect,\n} from 'react';\nimport { SelectValue } from 'antd/lib/select';\n\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport DatabaseSelector, {\n  DatabaseObject,\n} from 'src/components/DatabaseSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\n\nconst TableSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.secondary.light5};\n      margin: 15px 0;\n    }\n\n    .table-length {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    .select {\n      flex: 1;\n    }\n  `}\n`;\n\nconst TableLabel = styled.span`\n  align-items: center;\n  display: flex;\n  white-space: nowrap;\n\n  svg,\n  small {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\ninterface TableSelectorProps {\n  clearable?: boolean;\n  database?: DatabaseObject | null;\n  emptyState?: ReactNode;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => {};\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onSchemaChange?: (schema?: string) => void;\n  onSchemasLoad?: () => void;\n  onTablesLoad?: (options: Array<any>) => void;\n  readOnly?: boolean;\n  schema?: string;\n  onEmptyResults?: (searchText?: string) => void;\n  sqlLabMode?: boolean;\n  tableValue?: string | string[];\n  onTableSelectChange?: (value?: string | string[], schema?: string) => void;\n  tableSelectMode?: 'single' | 'multiple';\n}\n\ninterface Table {\n  label: string;\n  value: string;\n  type: string;\n  extra?: {\n    certification?: {\n      certified_by: string;\n      details: string;\n    };\n    warning_markdown?: string;\n  };\n}\n\ninterface TableOption {\n  label: JSX.Element;\n  text: string;\n  value: string;\n}\n\nconst TableOption = ({ table }: { table: Table }) => {\n  const { label, type, extra } = table;\n  return (\n    <TableLabel title={label}>\n      {type === 'view' ? (\n        <Icons.Eye iconSize=\"m\" />\n      ) : (\n        <Icons.Table iconSize=\"m\" />\n      )}\n      {extra?.certification && (\n        <CertifiedBadge\n          certifiedBy={extra.certification.certified_by}\n          details={extra.certification.details}\n          size=\"l\"\n        />\n      )}\n      {extra?.warning_markdown && (\n        <WarningIconWithTooltip\n          warningMarkdown={extra.warning_markdown}\n          size=\"l\"\n        />\n      )}\n      {label}\n    </TableLabel>\n  );\n};\n\nconst TableSelector: FunctionComponent<TableSelectorProps> = ({\n  database,\n  emptyState,\n  formMode = false,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onSchemaChange,\n  onSchemasLoad,\n  onTablesLoad,\n  readOnly = false,\n  onEmptyResults,\n  schema,\n  sqlLabMode = true,\n  tableSelectMode = 'single',\n  tableValue = undefined,\n  onTableSelectChange,\n}) => {\n  const [currentDatabase, setCurrentDatabase] = useState<\n    DatabaseObject | null | undefined\n  >(database);\n  const [currentSchema, setCurrentSchema] = useState<string | undefined>(\n    schema,\n  );\n  const [tableOptions, setTableOptions] = useState<TableOption[]>([]);\n  const [tableSelectValue, setTableSelectValue] = useState<\n    SelectValue | undefined\n  >(undefined);\n  const [refresh, setRefresh] = useState(0);\n  const [previousRefresh, setPreviousRefresh] = useState(0);\n  const [loadingTables, setLoadingTables] = useState(false);\n  const { addSuccessToast } = useToasts();\n\n  useEffect(() => {\n    // reset selections\n    if (database === undefined) {\n      setCurrentDatabase(undefined);\n      setCurrentSchema(undefined);\n      setTableSelectValue(undefined);\n    }\n  }, [database, tableSelectMode]);\n\n  useEffect(() => {\n    setCurrentDatabase(database);\n  }, [database]);\n\n  useEffect(() => {\n    if (tableSelectMode === 'single') {\n      setTableSelectValue(\n        tableOptions.find(option => option.value === tableValue),\n      );\n    } else {\n      setTableSelectValue(\n        tableOptions?.filter(\n          option => option && tableValue?.includes(option.value),\n        ) || [],\n      );\n    }\n  }, [tableOptions, tableValue, tableSelectMode]);\n\n  useEffect(() => {\n    if (currentDatabase && currentSchema) {\n      setLoadingTables(true);\n      const encodedSchema = encodeURIComponent(currentSchema);\n      const forceRefresh = refresh !== previousRefresh;\n      // TODO: Would be nice to add pagination in a follow-up. Needs endpoint changes.\n      const endpoint = encodeURI(\n        `/superset/tables/${currentDatabase.id}/${encodedSchema}/undefined/${forceRefresh}/`,\n      );\n\n      if (previousRefresh !== refresh) {\n        setPreviousRefresh(refresh);\n      }\n\n      SupersetClient.get({ endpoint })\n        .then(({ json }) => {\n          const options: TableOption[] = json.options.map((table: Table) => {\n            const option: TableOption = {\n              value: table.value,\n              label: <TableOption table={table} />,\n              text: table.label,\n            };\n\n            return option;\n          });\n\n          onTablesLoad?.(json.options);\n          setTableOptions(options);\n          setLoadingTables(false);\n          if (forceRefresh) addSuccessToast('List updated');\n        })\n        .catch(() => {\n          setLoadingTables(false);\n          handleError(t('There was an error loading the tables'));\n        });\n    }\n    // We are using the refresh state to re-trigger the query\n    // previousRefresh should be out of dependencies array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentDatabase, currentSchema, onTablesLoad, setTableOptions, refresh]);\n\n  function renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n    return (\n      <div className=\"section\">\n        <span className=\"select\">{select}</span>\n        <span className=\"refresh\">{refreshBtn}</span>\n      </div>\n    );\n  }\n\n  const internalTableChange = (\n    selectedOptions: TableOption | TableOption[] | undefined,\n  ) => {\n    if (currentSchema) {\n      onTableSelectChange?.(\n        Array.isArray(selectedOptions)\n          ? selectedOptions.map(option => option?.value)\n          : selectedOptions?.value,\n        currentSchema,\n      );\n    } else {\n      setTableSelectValue(selectedOptions);\n    }\n  };\n\n  const internalDbChange = (db: DatabaseObject) => {\n    setCurrentDatabase(db);\n    if (onDbChange) {\n      onDbChange(db);\n    }\n  };\n\n  const internalSchemaChange = (schema?: string) => {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema);\n    }\n\n    internalTableChange(undefined);\n  };\n\n  function renderDatabaseSelector() {\n    return (\n      <DatabaseSelector\n        key={currentDatabase?.id}\n        db={currentDatabase}\n        emptyState={emptyState}\n        formMode={formMode}\n        getDbList={getDbList}\n        handleError={handleError}\n        onDbChange={readOnly ? undefined : internalDbChange}\n        onEmptyResults={onEmptyResults}\n        onSchemaChange={readOnly ? undefined : internalSchemaChange}\n        onSchemasLoad={onSchemasLoad}\n        schema={currentSchema}\n        sqlLabMode={sqlLabMode}\n        isDatabaseSelectEnabled={isDatabaseSelectEnabled && !readOnly}\n        readOnly={readOnly}\n      />\n    );\n  }\n\n  const handleFilterOption = useMemo(\n    () => (search: string, option: TableOption) => {\n      const searchValue = search.trim().toLowerCase();\n      const { text } = option;\n      return text.toLowerCase().includes(searchValue);\n    },\n    [],\n  );\n\n  function renderTableSelect() {\n    const disabled =\n      (currentSchema && !formMode && readOnly) ||\n      (!currentSchema && !database?.allow_multi_schema_metadata_fetch);\n\n    const header = sqlLabMode ? (\n      <FormLabel>{t('See table schema')}</FormLabel>\n    ) : (\n      <FormLabel>{t('Table')}</FormLabel>\n    );\n\n    const select = (\n      <Select\n        ariaLabel={t('Select table or type table name')}\n        disabled={disabled}\n        filterOption={handleFilterOption}\n        header={header}\n        labelInValue\n        lazyLoading={false}\n        loading={loadingTables}\n        name=\"select-table\"\n        onChange={(options: TableOption | TableOption[]) =>\n          internalTableChange(options)\n        }\n        options={tableOptions}\n        placeholder={t('Select table or type table name')}\n        showSearch\n        mode={tableSelectMode}\n        value={tableSelectValue}\n        allowClear={tableSelectMode === 'multiple'}\n      />\n    );\n\n    const refreshLabel = !formMode && !readOnly && (\n      <RefreshLabel\n        onClick={() => setRefresh(refresh + 1)}\n        tooltipContent={t('Force refresh table list')}\n      />\n    );\n\n    return renderSelectRow(select, refreshLabel);\n  }\n\n  return (\n    <TableSelectorWrapper>\n      {renderDatabaseSelector()}\n      {sqlLabMode && !formMode && <div className=\"divider\" />}\n      {renderTableSelect()}\n    </TableSelectorWrapper>\n  );\n};\n\nexport const TableSelectorMultiple: FunctionComponent<TableSelectorProps> =\n  props => <TableSelector tableSelectMode=\"multiple\" {...props} />;\n\nexport default TableSelector;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\n\nexport const commonMenuData = {\n  name: t('Data'),\n  tabs: [\n    {\n      name: 'Databases',\n      label: t('Databases'),\n      url: '/databaseview/list/',\n      usesRouter: true,\n    },\n    {\n      name: 'Datasets',\n      label: t('Datasets'),\n      url: '/tablemodelview/list/',\n      usesRouter: true,\n    },\n    {\n      name: 'Saved queries',\n      label: t('Saved queries'),\n      url: '/savedqueryview/list/',\n      usesRouter: true,\n    },\n    {\n      name: 'Query history',\n      label: t('Query history'),\n      url: '/superset/sqllab/history/',\n      usesRouter: true,\n    },\n  ],\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useState, useEffect } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\nimport Modal from 'src/components/Modal';\nimport TableSelector from 'src/components/TableSelector';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { DatabaseObject } from 'src/components/DatabaseSelector';\nimport {\n  getItem,\n  LocalStorageKeys,\n  setItem,\n} from 'src/utils/localStorageHelpers';\n\ntype DatasetAddObject = {\n  id: number;\n  database: number;\n  schema: string;\n  table_name: string;\n};\ninterface DatasetModalProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onDatasetAdd?: (dataset: DatasetAddObject) => void;\n  onHide: () => void;\n  show: boolean;\n}\n\nconst TableSelectorContainer = styled.div`\n  padding-bottom: 340px;\n  width: 65%;\n`;\n\nconst DatasetModal: FunctionComponent<DatasetModalProps> = ({\n  addDangerToast,\n  onDatasetAdd,\n  onHide,\n  show,\n}) => {\n  const [currentDatabase, setCurrentDatabase] = useState<\n    DatabaseObject | undefined\n  >();\n  const [currentSchema, setSchema] = useState<string | undefined>('');\n  const [currentTableName, setTableName] = useState('');\n  const [disableSave, setDisableSave] = useState(true);\n  const {\n    createResource,\n    state: { loading },\n  } = useSingleViewResource<Partial<DatasetAddObject>>(\n    'dataset',\n    t('dataset'),\n    addDangerToast,\n  );\n\n  useEffect(() => {\n    setDisableSave(currentDatabase === undefined || currentTableName === '');\n  }, [currentTableName, currentDatabase]);\n\n  useEffect(() => {\n    const currentUserSelectedDb = getItem(\n      LocalStorageKeys.db,\n      null,\n    ) as DatabaseObject;\n    if (currentUserSelectedDb) setCurrentDatabase(currentUserSelectedDb);\n  }, []);\n\n  const onDbChange = (db: DatabaseObject) => {\n    setCurrentDatabase(db);\n  };\n\n  const onSchemaChange = (schema?: string) => {\n    setSchema(schema);\n  };\n\n  const onTableChange = (tableName: string) => {\n    setTableName(tableName);\n  };\n\n  const clearModal = () => {\n    setSchema('');\n    setTableName('');\n    setCurrentDatabase(undefined);\n    setDisableSave(true);\n  };\n\n  const hide = () => {\n    setItem(LocalStorageKeys.db, null);\n    clearModal();\n    onHide();\n  };\n\n  const onSave = () => {\n    if (currentDatabase === undefined) {\n      return;\n    }\n    const data = {\n      database: currentDatabase.id,\n      ...(currentSchema ? { schema: currentSchema } : {}),\n      table_name: currentTableName,\n    };\n    createResource(data).then(response => {\n      if (!response) {\n        return;\n      }\n      if (onDatasetAdd) {\n        onDatasetAdd({ id: response.id, ...response });\n      }\n      window.location.href = `/chart/add?dataset=${currentTableName}`;\n      hide();\n    });\n  };\n\n  return (\n    <Modal\n      disablePrimaryButton={disableSave}\n      primaryButtonLoading={loading}\n      onHandledPrimaryAction={onSave}\n      onHide={hide}\n      primaryButtonName={t('Add Dataset and Create Chart')}\n      show={show}\n      title={t('Add dataset')}\n    >\n      <TableSelectorContainer>\n        <TableSelector\n          clearable={false}\n          formMode\n          database={currentDatabase}\n          schema={currentSchema}\n          tableValue={currentTableName}\n          onDbChange={onDbChange}\n          onSchemaChange={onSchemaChange}\n          onTableSelectChange={onTableChange}\n          handleError={addDangerToast}\n        />\n      </TableSelectorContainer>\n    </Modal>\n  );\n};\n\nexport default withToasts(DatasetModal);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient, t, styled } from '@superset-ui/core';\nimport React, {\n  FunctionComponent,\n  useState,\n  useMemo,\n  useCallback,\n  useEffect,\n} from 'react';\nimport rison from 'rison';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport {\n  createFetchRelated,\n  createFetchDistinct,\n  createErrorHandler,\n} from 'src/views/CRUD/utils';\nimport { getItem, LocalStorageKeys } from 'src/utils/localStorageHelpers';\nimport { ColumnObject } from 'src/views/CRUD/data/dataset/types';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { DatasourceModal } from 'src/components/Datasource';\nimport DeleteModal from 'src/components/DeleteModal';\nimport handleResourceExport from 'src/utils/export';\nimport ListView, {\n  ListViewProps,\n  Filters,\n  FilterOperator,\n} from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport SubMenu, {\n  SubMenuProps,\n  ButtonProps,\n} from 'src/views/components/SubMenu';\nimport { commonMenuData } from 'src/views/CRUD/data/common';\nimport Owner from 'src/types/Owner';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport FacePile from 'src/components/FacePile';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { isUserAdmin } from 'src/dashboard/util/permissionUtils';\nimport AddDatasetModal from './AddDatasetModal';\n\nimport {\n  PAGE_SIZE,\n  SORT_BY,\n  PASSWORDS_NEEDED_MESSAGE,\n  CONFIRM_OVERWRITE_MESSAGE,\n} from './constants';\n\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n\n  .disabled {\n    svg,\n    i {\n      &:hover {\n        path {\n          fill: ${({ theme }) => theme.colors.grayscale.light1};\n        }\n      }\n    }\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    .ant-menu-item:hover {\n      color: ${({ theme }) => theme.colors.grayscale.light1};\n      cursor: default;\n    }\n    &::after {\n      color: ${({ theme }) => theme.colors.grayscale.light1};\n    }\n  }\n`;\n\ntype Dataset = {\n  changed_by_name: string;\n  changed_by_url: string;\n  changed_by: string;\n  changed_on_delta_humanized: string;\n  database: {\n    id: string;\n    database_name: string;\n  };\n  kind: string;\n  explore_url: string;\n  id: number;\n  owners: Array<Owner>;\n  schema: string;\n  table_name: string;\n};\n\ninterface DatasetListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nconst DatasetList: FunctionComponent<DatasetListProps> = ({\n  addDangerToast,\n  addSuccessToast,\n  user,\n}) => {\n  const {\n    state: {\n      loading,\n      resourceCount: datasetCount,\n      resourceCollection: datasets,\n      bulkSelectEnabled,\n    },\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Dataset>('dataset', t('dataset'), addDangerToast);\n\n  const [datasetAddModalOpen, setDatasetAddModalOpen] =\n    useState<boolean>(false);\n\n  const [datasetCurrentlyDeleting, setDatasetCurrentlyDeleting] = useState<\n    (Dataset & { chart_count: number; dashboard_count: number }) | null\n  >(null);\n\n  const [datasetCurrentlyEditing, setDatasetCurrentlyEditing] =\n    useState<Dataset | null>(null);\n\n  const [importingDataset, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n\n  const openDatasetImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeDatasetImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleDatasetImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Dataset imported'));\n  };\n\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canCreate = hasPerm('can_write');\n  const canExport =\n    hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n\n  const initialSort = SORT_BY;\n  useEffect(() => {\n    const db = getItem(LocalStorageKeys.db, null);\n    if (!loading && db) {\n      setDatasetAddModalOpen(true);\n    }\n  }, [loading]);\n\n  const openDatasetEditModal = useCallback(\n    ({ id }: Dataset) => {\n      SupersetClient.get({\n        endpoint: `/api/v1/dataset/${id}`,\n      })\n        .then(({ json = {} }) => {\n          const addCertificationFields = json.result.columns.map(\n            (column: ColumnObject) => {\n              const {\n                certification: { details = '', certified_by = '' } = {},\n              } = JSON.parse(column.extra || '{}') || {};\n              return {\n                ...column,\n                certification_details: details || '',\n                certified_by: certified_by || '',\n                is_certified: details || certified_by,\n              };\n            },\n          );\n          // eslint-disable-next-line no-param-reassign\n          json.result.columns = [...addCertificationFields];\n          setDatasetCurrentlyEditing(json.result);\n        })\n        .catch(() => {\n          addDangerToast(\n            t('An error occurred while fetching dataset related data'),\n          );\n        });\n    },\n    [addDangerToast],\n  );\n\n  const openDatasetDeleteModal = (dataset: Dataset) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/dataset/${dataset.id}/related_objects`,\n    })\n      .then(({ json = {} }) => {\n        setDatasetCurrentlyDeleting({\n          ...dataset,\n          chart_count: json.charts.count,\n          dashboard_count: json.dashboards.count,\n        });\n      })\n      .catch(\n        createErrorHandler(errMsg =>\n          t(\n            'An error occurred while fetching dataset related data: %s',\n            errMsg,\n          ),\n        ),\n      );\n\n  const handleBulkDatasetExport = (datasetsToExport: Dataset[]) => {\n    const ids = datasetsToExport.map(({ id }) => id);\n    handleResourceExport('dataset', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { kind },\n          },\n        }: any) => {\n          if (kind === 'physical') {\n            return (\n              <Tooltip\n                id=\"physical-dataset-tooltip\"\n                title={t('Physical dataset')}\n              >\n                <Icons.DatasetPhysical />\n              </Tooltip>\n            );\n          }\n\n          return (\n            <Tooltip id=\"virtual-dataset-tooltip\" title={t('Virtual dataset')}>\n              <Icons.DatasetVirtual />\n            </Tooltip>\n          );\n        },\n        accessor: 'kind_icon',\n        disableSortBy: true,\n        size: 'xs',\n        id: 'id',\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              extra,\n              table_name: datasetTitle,\n              description,\n              explore_url: exploreURL,\n            },\n          },\n        }: any) => {\n          const titleLink = <a href={exploreURL}>{datasetTitle}</a>;\n          try {\n            const parsedExtra = JSON.parse(extra);\n            return (\n              <FlexRowContainer>\n                {parsedExtra?.certification && (\n                  <CertifiedBadge\n                    certifiedBy={parsedExtra.certification.certified_by}\n                    details={parsedExtra.certification.details}\n                    size=\"l\"\n                  />\n                )}\n                {parsedExtra?.warning_markdown && (\n                  <WarningIconWithTooltip\n                    warningMarkdown={parsedExtra.warning_markdown}\n                    size=\"l\"\n                  />\n                )}\n                {titleLink}\n                {description && (\n                  <InfoTooltip tooltip={description} viewBox=\"0 -1 24 24\" />\n                )}\n              </FlexRowContainer>\n            );\n          } catch {\n            return titleLink;\n          }\n        },\n        Header: t('Name'),\n        accessor: 'table_name',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { kind },\n          },\n        }: any) => kind[0]?.toUpperCase() + kind.slice(1),\n        Header: t('Type'),\n        accessor: 'kind',\n        disableSortBy: true,\n        size: 'md',\n      },\n      {\n        Header: t('Database'),\n        accessor: 'database.database_name',\n        size: 'lg',\n      },\n      {\n        Header: t('Schema'),\n        accessor: 'schema',\n        size: 'lg',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => <span className=\"no-wrap\">{changedOn}</span>,\n        Header: t('Modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_by_name: changedByName },\n          },\n        }: any) => changedByName,\n        Header: t('Modified by'),\n        accessor: 'changed_by.first_name',\n        size: 'xl',\n      },\n      {\n        accessor: 'database',\n        disableSortBy: true,\n        hidden: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { owners = [] },\n          },\n        }: any) => <FacePile users={owners} />,\n        Header: t('Owners'),\n        id: 'owners',\n        disableSortBy: true,\n        size: 'lg',\n      },\n      {\n        accessor: 'sql',\n        hidden: true,\n        disableSortBy: true,\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          // Verify owner or isAdmin\n          const allowEdit =\n            original.owners.map((o: Owner) => o.id).includes(user.userId) ||\n            isUserAdmin(user);\n\n          const handleEdit = () => openDatasetEditModal(original);\n          const handleDelete = () => openDatasetDeleteModal(original);\n          const handleExport = () => handleBulkDatasetExport([original]);\n          if (!canEdit && !canDelete && !canExport) {\n            return null;\n          }\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <Tooltip\n                  id=\"delete-action-tooltip\"\n                  title={t('Delete')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleDelete}\n                  >\n                    <Icons.Trash />\n                  </span>\n                </Tooltip>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={\n                    allowEdit\n                      ? t('Edit')\n                      : t(\n                          'You must be a dataset owner in order to edit. Please reach out to a dataset owner to request modifications or edit access.',\n                        )\n                  }\n                  placement=\"bottomRight\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className={allowEdit ? 'action-button' : 'disabled'}\n                    onClick={allowEdit ? handleEdit : undefined}\n                  >\n                    <Icons.EditAlt />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete,\n        disableSortBy: true,\n      },\n    ],\n    [canEdit, canDelete, canExport, openDatasetEditModal],\n  );\n\n  const filterTypes: Filters = useMemo(\n    () => [\n      {\n        Header: t('Owner'),\n        id: 'owners',\n        input: 'select',\n        operator: FilterOperator.relationManyMany,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchRelated(\n          'dataset',\n          'owners',\n          createErrorHandler(errMsg =>\n            t(\n              'An error occurred while fetching dataset owner values: %s',\n              errMsg,\n            ),\n          ),\n          user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Database'),\n        id: 'database',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchRelated(\n          'dataset',\n          'database',\n          createErrorHandler(errMsg =>\n            t('An error occurred while fetching datasets: %s', errMsg),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Schema'),\n        id: 'schema',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchDistinct(\n          'dataset',\n          'schema',\n          createErrorHandler(errMsg =>\n            t('An error occurred while fetching schema values: %s', errMsg),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Type'),\n        id: 'sql',\n        input: 'select',\n        operator: FilterOperator.datasetIsNullOrEmpty,\n        unfilteredLabel: 'All',\n        selects: [\n          { label: 'Virtual', value: false },\n          { label: 'Physical', value: true },\n        ],\n      },\n      {\n        Header: t('Certified'),\n        id: 'id',\n        urlDisplay: 'certified',\n        input: 'select',\n        operator: FilterOperator.datasetIsCertified,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n      {\n        Header: t('Search'),\n        id: 'table_name',\n        input: 'search',\n        operator: FilterOperator.contains,\n      },\n    ],\n    [],\n  );\n\n  const menuData: SubMenuProps = {\n    activeChild: 'Datasets',\n    ...commonMenuData,\n  };\n\n  const buttonArr: Array<ButtonProps> = [];\n\n  if (canDelete || canExport) {\n    buttonArr.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary',\n    });\n  }\n\n  const CREATE_HASH = '#create';\n  const location = useLocation();\n  const history = useHistory();\n\n  //  Sync Dataset Add modal with #create hash\n  useEffect(() => {\n    const modalOpen = location.hash === CREATE_HASH && canCreate;\n    setDatasetAddModalOpen(modalOpen);\n  }, [canCreate, location.hash]);\n\n  //  Add #create hash\n  const openDatasetAddModal = useCallback(() => {\n    history.replace(`${location.pathname}${location.search}${CREATE_HASH}`);\n  }, [history, location.pathname, location.search]);\n\n  //  Remove #create hash\n  const closeDatasetAddModal = useCallback(() => {\n    history.replace(`${location.pathname}${location.search}`);\n  }, [history, location.pathname, location.search]);\n\n  if (canCreate) {\n    buttonArr.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Dataset')}{' '}\n        </>\n      ),\n      onClick: openDatasetAddModal,\n      buttonStyle: 'primary',\n    });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      buttonArr.push({\n        name: (\n          <Tooltip\n            id=\"import-tooltip\"\n            title={t('Import datasets')}\n            placement=\"bottomRight\"\n          >\n            <Icons.Import data-test=\"import-button\" />\n          </Tooltip>\n        ),\n        buttonStyle: 'link',\n        onClick: openDatasetImportModal,\n      });\n    }\n  }\n\n  menuData.buttons = buttonArr;\n\n  const closeDatasetDeleteModal = () => {\n    setDatasetCurrentlyDeleting(null);\n  };\n\n  const closeDatasetEditModal = () => {\n    setDatasetCurrentlyEditing(null);\n  };\n\n  const handleDatasetDelete = ({ id, table_name: tableName }: Dataset) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/${id}`,\n    }).then(\n      () => {\n        refreshData();\n        setDatasetCurrentlyDeleting(null);\n        addSuccessToast(t('Deleted: %s', tableName));\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting %s: %s', tableName, errMsg),\n        ),\n      ),\n    );\n  };\n\n  const handleBulkDatasetDelete = (datasetsToDelete: Dataset[]) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/?q=${rison.encode(\n        datasetsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected datasets: %s', errMsg),\n        ),\n      ),\n    );\n  };\n\n  return (\n    <>\n      <SubMenu {...menuData} />\n      <AddDatasetModal\n        show={datasetAddModalOpen}\n        onHide={closeDatasetAddModal}\n        onDatasetAdd={refreshData}\n      />\n      {datasetCurrentlyDeleting && (\n        <DeleteModal\n          description={t(\n            'The dataset %s is linked to %s charts that appear on %s dashboards. Are you sure you want to continue? Deleting the dataset will break those objects.',\n            datasetCurrentlyDeleting.table_name,\n            datasetCurrentlyDeleting.chart_count,\n            datasetCurrentlyDeleting.dashboard_count,\n          )}\n          onConfirm={() => {\n            if (datasetCurrentlyDeleting) {\n              handleDatasetDelete(datasetCurrentlyDeleting);\n            }\n          }}\n          onHide={closeDatasetDeleteModal}\n          open\n          title={t('Delete Dataset?')}\n        />\n      )}\n      {datasetCurrentlyEditing && (\n        <DatasourceModal\n          datasource={datasetCurrentlyEditing}\n          onDatasourceSave={refreshData}\n          onHide={closeDatasetEditModal}\n          show\n        />\n      )}\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t(\n          'Are you sure you want to delete the selected datasets?',\n        )}\n        onConfirm={handleBulkDatasetDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              onSelect: confirmDelete,\n              type: 'danger',\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkDatasetExport,\n            });\n          }\n          return (\n            <ListView<Dataset>\n              className=\"dataset-list-view\"\n              columns={columns}\n              data={datasets}\n              count={datasetCount}\n              pageSize={PAGE_SIZE}\n              fetchData={fetchData}\n              filters={filterTypes}\n              loading={loading}\n              initialSort={initialSort}\n              bulkActions={bulkActions}\n              bulkSelectEnabled={bulkSelectEnabled}\n              disableBulkSelect={toggleBulkSelect}\n              renderBulkSelectCopy={selected => {\n                const { virtualCount, physicalCount } = selected.reduce(\n                  (acc, e) => {\n                    if (e.original.kind === 'physical') acc.physicalCount += 1;\n                    else if (e.original.kind === 'virtual') {\n                      acc.virtualCount += 1;\n                    }\n                    return acc;\n                  },\n                  { virtualCount: 0, physicalCount: 0 },\n                );\n\n                if (!selected.length) {\n                  return t('0 Selected');\n                }\n                if (virtualCount && !physicalCount) {\n                  return t(\n                    '%s Selected (Virtual)',\n                    selected.length,\n                    virtualCount,\n                  );\n                }\n                if (physicalCount && !virtualCount) {\n                  return t(\n                    '%s Selected (Physical)',\n                    selected.length,\n                    physicalCount,\n                  );\n                }\n\n                return t(\n                  '%s Selected (%s Physical, %s Virtual)',\n                  selected.length,\n                  physicalCount,\n                  virtualCount,\n                );\n              }}\n            />\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"dataset\"\n        resourceLabel={t('dataset')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleDatasetImport}\n        show={importingDataset}\n        onHide={closeDatasetImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n      />\n      {preparingExport && <Loading />}\n    </>\n  );\n};\n\nexport default withToasts(DatasetList);\n"],"names":["DatabaseSelectorWrapper","theme","gridUnit","LabelStyle","SelectLabel","backend","databaseName","className","title","DatabaseSelector","db","formMode","emptyState","getDbList","handleError","isDatabaseSelectEnabled","onDbChange","onEmptyResults","onSchemaChange","onSchemasLoad","readOnly","schema","sqlLabMode","loadingSchemas","setLoadingSchemas","useState","schemaOptions","setSchemaOptions","currentDb","setCurrentDb","label","database_name","value","id","undefined","currentSchema","setCurrentSchema","refresh","setRefresh","addSuccessToast","loadDatabases","useMemo","async","search","page","pageSize","endpoint","order_columns","order_direction","page_size","filters","col","opr","then","json","result","length","options","map","row","allow_multi_schema_metadata_fetch","data","totalCount","renderSelectRow","select","refreshBtn","useEffect","queryParams","force","s","catch","t","ariaLabel","optionFilterProps","header","lazyLoading","notFoundContent","onChange","database","placeholder","disabled","refreshIcon","onClick","tooltipContent","labelInValue","loading","name","item","changeSchema","showSearch","renderSchemaSelect","HelperMessage","colors","grayscale","base","typography","sizes","StyledInputContainer","light1","light2","resourceName","resourceLabel","passwordsNeededMessage","confirmOverwriteMessage","onModelImport","show","onHide","passwordFields","setPasswordFields","isHidden","setIsHidden","passwords","setPasswords","needsOverwriteConfirm","setNeedsOverwriteConfirm","confirmedOverwrite","setConfirmedOverwrite","fileList","setFileList","importingModel","setImportingModel","errorMessage","setErrorMessage","clearModal","state","alreadyExists","passwordsNeeded","importResource","msg","disablePrimaryButton","onHandledPrimaryAction","originFileObj","File","primaryButtonName","primaryButtonType","width","accept","info","file","status","onRemove","removedFile","filter","uid","customRequest","showDbInstallInstructions","fileName","key","autoComplete","type","event","target","targetValue","currentTarget","toUpperCase","IconWithoutRef","forwardRef","props","ref","role","css","cursor","color","primary","TableSelectorWrapper","secondary","light5","TableLabel","TableOption","table","extra","iconSize","certification","certifiedBy","certified_by","details","size","warning_markdown","warningMarkdown","TableSelector","onTablesLoad","tableSelectMode","tableValue","onTableSelectChange","currentDatabase","setCurrentDatabase","tableOptions","setTableOptions","tableSelectValue","setTableSelectValue","previousRefresh","setPreviousRefresh","loadingTables","setLoadingTables","find","option","includes","encodedSchema","encodeURIComponent","forceRefresh","encodeURI","text","internalTableChange","selectedOptions","Array","isArray","handleFilterOption","searchValue","trim","toLowerCase","filterOption","mode","allowClear","renderTableSelect","TableSelectorMultiple","commonMenuData","tabs","url","usesRouter","TableSelectorContainer","style","withToasts","addDangerToast","onDatasetAdd","setSchema","currentTableName","setTableName","disableSave","setDisableSave","createResource","currentUserSelectedDb","hide","Modal","primaryButtonLoading","table_name","response","window","location","href","clearable","tableName","FlexRowContainer","Actions","user","resourceCount","datasetCount","resourceCollection","datasets","bulkSelectEnabled","hasPerm","fetchData","toggleBulkSelect","refreshData","datasetAddModalOpen","setDatasetAddModalOpen","datasetCurrentlyDeleting","setDatasetCurrentlyDeleting","datasetCurrentlyEditing","setDatasetCurrentlyEditing","importingDataset","showImportModal","preparingExport","setPreparingExport","canEdit","canDelete","canCreate","canExport","initialSort","openDatasetEditModal","useCallback","SupersetClient","addCertificationFields","columns","column","JSON","parse","certification_details","is_certified","handleBulkDatasetExport","datasetsToExport","ids","Cell","original","kind","Tooltip","Icons","accessor","disableSortBy","datasetTitle","description","explore_url","exploreURL","titleLink","parsedExtra","CertifiedBadge","WarningIconWithTooltip","InfoTooltip","tooltip","viewBox","Header","slice","changed_on_delta_humanized","changedOn","changed_by_name","changedByName","hidden","owners","FacePile","users","allowEdit","o","userId","i","placement","tabIndex","openDatasetDeleteModal","dataset","chart_count","charts","count","dashboard_count","dashboards","errMsg","filterTypes","input","operator","unfilteredLabel","fetchSelects","paginate","selects","urlDisplay","menuData","activeChild","common","buttonArr","push","buttonStyle","history","modalOpen","hash","openDatasetAddModal","replace","pathname","closeDatasetAddModal","buttons","SubMenu","AddDatasetModal","DeleteModal","onConfirm","handleDatasetDelete","open","Datasource","datasource","onDatasourceSave","ConfirmStatusChange","datasetsToDelete","message","confirmDelete","bulkActions","onSelect","ListView","disableBulkSelect","renderBulkSelectCopy","selected","virtualCount","physicalCount","reduce","acc","e","Loading"],"sourceRoot":""}