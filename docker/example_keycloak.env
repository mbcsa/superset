#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


COMPOSE_PROJECT_NAME=superset

APP_NAME = "TEST BI"

# database configurations (do not modify)
DATABASE_DB=superset
DATABASE_HOST=db
# Make sure you set this to a unique secure random value on production
DATABASE_PASSWORD=superset
DATABASE_USER=superset

EXAMPLES_DB=examples
EXAMPLES_HOST=db
EXAMPLES_USER=examples
# Make sure you set this to a unique secure random value on production
EXAMPLES_PASSWORD=examples
EXAMPLES_PORT=5432

# database engine specific environment variables
# change the below if you prefer another database engine
DATABASE_PORT=5432
DATABASE_DIALECT=postgresql
POSTGRES_DB=superset
POSTGRES_USER=superset
# Make sure you set this to a unique secure random value on production
POSTGRES_PASSWORD=superset
#MYSQL_DATABASE=superset
#MYSQL_USER=superset
#MYSQL_PASSWORD=superset
#MYSQL_RANDOM_ROOT_PASSWORD=yes

# Add the mapped in /app/pythonpath_docker which allows devs to override stuff
PYTHONPATH=/app/pythonpath:/app/docker/pythonpath_dev
REDIS_HOST=redis
REDIS_PORT=6379

FLASK_DEBUG=true
SUPERSET_ENV=development
SUPERSET_LOAD_EXAMPLES=no
CYPRESS_CONFIG=false
SUPERSET_PORT=8088
MAPBOX_API_KEY=''

# Make sure you set this to a unique secure random value on production
# openssl rand -base64 42
SECRET_KEY='SARASA_SARASA_SARASA_SARASA_SARASA_SARASA_SARASA'

ENABLE_PLAYWRIGHT=false
PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
BUILD_SUPERSET_FRONTEND_IN_DOCKER=true

# OAUTH_ISSUER_NAME debe coincidir con el redirect_uri configurado en el Keycloak
OAUTH_ISSUER_NAME="keycloak"
OAUTH_ISSUER_ICON="fa-key"
OAUTH_TOKEN_KEY="access_token"
OAUTH_CLIENT_ID="<client_id>"
OAUTH_CLIENT_SECRET="<client_secret>"
OAUTH_ACCESS_TOKEN_URL="https://<keycloak_host>/realms/<realm>/protocol/openid-connect/token"
OAUTH_AUTHORIZE_URL="https://<keycloak_host>/realms/<realm>/protocol/openid-connect/auth"
OAUTH_SERVER_METADATA_URL="https://<keycloak_host>/realms/<realm>/.well-known/openid-configuration"
OAUTH_JWKS_URI="https://<keycloak_host>/realms/<realm>/protocol/openid-connect/certs"
# OAUTH_API_BASE_URL DEBE terminar con "/"
OAUTH_API_BASE_URL="https://<keycloak_host>/realms/<realm>/protocol/"
# Si no existe, crear un client scope llamado "role_keys". 
#   * Agregar un mapper, buscando por configuración seleccionar "Role List".
# Volver a Client scopes, seleccionar "role_keys" y configurar:
#   * En la sección "Mappers", seleccionar "Client Roles" y habilitar "Add to userinfo"
OAUTH_SCOPES="openid profile email role_keys"
OAUTH_LOGOUT_REDIRECT_URL="https://<keycloak_host>/realms/<realm>/protocol/openid-connect/logout"